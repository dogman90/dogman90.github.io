I"S<p>while문과 for문은 조건을 만족하지 않으면 반복문 내의 코드가 한 번도 실행되지 않습니다. 최소 한 번은 반복문을 실행하고 그 이후에 조건에 따라 실행 여부를 결정하고 싶을 때 사용하는 것이 do while 반복문입니다.</p>

<p><br /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span>
<span class="p">{</span>
	<span class="p">.</span> <span class="p">.</span> <span class="p">.</span>
<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="err">조건문</span><span class="p">);</span>
</code></pre></div></div>

<p>do- while 반복문이 실행되면 처음으로 do 블럭을 한 번 실행합니다. 그 이후 (. . .)의 조건식을 판단합니다. 이 조건식이 맞다면 다시 한 번 {. . .}를 실행하고 다시 (. . .)의 조건식을 판단합니다. while문과의 차이점은 최초 실행 여부입니다.</p>

<p>사실 do-while문은 while문에 비해서 활용빈도가 그리 높지 않습니다. 그리고 do-while문으로 구현가능한 코드는 while문이 100% 대체 가능할 수 있기도 합니다. 그럼에도 불구하고 do-while문이 while문보다 더 적절한 경우도 있습니다. 다음의 예시 코드를 봅시다.</p>

<p>우리는 사용자에게 1개 이상의 정수를 입력받아 그 수들의 합을 계산해주고 0을 입력받으면 종료되는 프로그램을 만들려고 합니다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Type a number(type 0 to quit) : "</span><span class="p">);</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
        <span class="n">sum</span><span class="o">+=</span><span class="n">num</span><span class="p">;</span> <span class="c1">//sum = sum + num;</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">num</span><span class="o">!=</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"The sum is %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>실행결과</p>

<p>Type a number(type 0 to quit) : 231</p>

<p>Type a number(type 0 to quit) : -19</p>

<p>Type a number(type 0 to quit) : 84</p>

<p>Type a number(type 0 to quit) : 194</p>

<p>Type a number(type 0 to quit) : -230</p>

<p>Type a number(type 0 to quit) : 0</p>

<p>The sum is 260</p>

<p>계속하려면 아무 키나 누르십시오 . . .</p>

<p>위와같은 경우에는 최소 한 번은 입력을 받아야 하기 때문에 do-while문을 사용하는 것이 더 적절합니다.</p>
:ET
I"(X<p>소켓 통신에서는 <strong>클라이언트와 서버 사이의 연결이 지속되고 실시간으로 양방향으로 데이터를 주고받는다.</strong> 오늘 할 일은 아래와 같다.</p>

<blockquote>
  <ol>
    <li>PC에서 이클립스와 Java를 통해 서버를 만들고 소켓을 뚫어서 돌린다.</li>
    <li>안드로이드 단말에서 위에서 만든 서버로 요청을 보내고 응답을 받는다.</li>
  </ol>
</blockquote>

<p><br /></p>

<p>여기서 주의해야할 것이 있다. PC로 서버를 돌릴 때, 공용 wifi를 사용했다면 IP주소는 192로 시작한다. 이 때는 안드로이드 역시 같은 공용 와이파이를 사용하는 상태라야 서버로 접근할 수 있다. 왜냐하면 공유기에 물려서 내부에서만 유효한 네트워크에 연결된 상태이기 때문에 외부에서 접근할 방법이 없기 때문이다. 이 부분을 모르고 포트포워딩을 하려다가 괜히 삽질로 시간만 날릴 수 있다.</p>

<p>먼저 이클립스에서 프로젝트를 생성하여 서버측 코드를 작성한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SocketServer</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">portNumber</span> <span class="o">=</span> <span class="mi">5555</span><span class="o">;</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"서버를 시작합니다..."</span><span class="o">);</span>
			<span class="nc">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="n">portNumber</span><span class="o">);</span> <span class="c1">//포트번호를 매개변수로 전달하면서 서버 소켓 열기</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"포트 "</span> <span class="o">+</span> <span class="n">portNumber</span> <span class="o">+</span> <span class="s">"에서 요청 대기중..."</span><span class="o">);</span>
			
			<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span> <span class="c1">//클라이언트가 접근했을 때 accept() 메소드를 통해 클라이언트 소켓 객체 참조</span>
				<span class="nc">InetAddress</span> <span class="n">clientHost</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="na">getLocalAddress</span><span class="o">();</span>
				<span class="kt">int</span> <span class="n">clientPort</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="na">getPort</span><span class="o">();</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"클라이언트 연결됨. 호스트 : "</span> <span class="o">+</span> <span class="n">clientHost</span> <span class="o">+</span> <span class="s">", 포트 : "</span> <span class="o">+</span> <span class="n">clientPort</span><span class="o">);</span>
				
				<span class="nc">ObjectInputStream</span> <span class="n">instream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span> <span class="c1">//소켓의 입력 스트림 객체 참조</span>
				<span class="nc">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">instream</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span> <span class="c1">// 입력 스트림으로부터 Object 객체 가져오기</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"클라이언트로부터 받은 데이터 : "</span> <span class="o">+</span> <span class="n">obj</span><span class="o">);</span> <span class="c1">// 가져온 객체 출력</span>
				
				<span class="nc">ObjectOutputStream</span> <span class="n">outstream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span> <span class="c1">//소켓의 출력 스트림 객체 참조</span>
				<span class="n">outstream</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">obj</span> <span class="o">+</span> <span class="s">" from server"</span><span class="o">);</span> <span class="c1">//출력 스트림에 응답 넣기</span>
				<span class="n">outstream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span> <span class="c1">// 출력</span>
				<span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//소켓 해제</span>
			<span class="o">}</span>
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>서버 소켓의 <code class="highlighter-rouge">accept()</code> 메소드를 사용하면 클라이언트의 요청이 왔을 때 클라이언트 소켓의 연결정보를 확인할 수 있다. 여기서 참조한 소켓의 입력 스트림을 통해 입력된 데이터를 읽고 출력 스트림을 생성하여 소켓을통해 내보낸다. 마지막으로 소켓을 해제한다.</p>

<p><br /></p>

<p>이제 클라이언트 측 코드를 안드로이드 스튜디오에서 작성할 차례다. 먼저 화면은 연결할 서버의 IP주소와 전송할 데이터를 위한 입력상자 2개와 클릭했을 때 전송을 하기위한 버튼을 하나 만든다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;EditText</span>
        <span class="na">android:id=</span><span class="s">"@+id/addressInput"</span>
        <span class="na">android:layout_width=</span><span class="s">"200dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:hint=</span><span class="s">"서버 IP"</span>
        <span class="na">android:textSize=</span><span class="s">"20dp"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"200dp"</span>
        <span class="na">android:layout_gravity=</span><span class="s">"center_horizontal"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;EditText</span>
        <span class="na">android:id=</span><span class="s">"@+id/dataInput"</span>
        <span class="na">android:layout_width=</span><span class="s">"200dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:hint=</span><span class="s">"보낼 데이터"</span>
        <span class="na">android:textSize=</span><span class="s">"20dp"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"10dp"</span>
        <span class="na">android:layout_gravity=</span><span class="s">"center_horizontal"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:id=</span><span class="s">"@+id/socketConnectBtn"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:text=</span><span class="s">"서버 전송"</span>
        <span class="na">android:textSize=</span><span class="s">"24dp"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"20dp"</span>
        <span class="na">android:layout_gravity=</span><span class="s">"center_horizontal"</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>클라이언트 자바 코드는 아래와 같이 작성한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>

    <span class="nc">EditText</span> <span class="n">addressInput</span><span class="o">;</span> <span class="c1">//호스트 IP 입력상자</span>
    <span class="nc">EditText</span> <span class="n">dataInput</span><span class="o">;</span> <span class="c1">//서버로 전송할 데이터 입력상자</span>

    <span class="nc">String</span> <span class="n">str</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">addr</span><span class="o">;</span>

    <span class="nc">String</span> <span class="n">response</span><span class="o">;</span> <span class="c1">//서버 응답</span>

    <span class="nc">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Handler</span><span class="o">();</span> <span class="c1">// 토스트를 띄우기 위한 메인스레드 핸들러 객체 생성</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>

        <span class="n">addressInput</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">addressInput</span><span class="o">);</span>
        <span class="n">dataInput</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dataInput</span><span class="o">);</span>
        <span class="nc">Button</span> <span class="n">socketConnectBtn</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">socketConnectBtn</span><span class="o">);</span>

        <span class="cm">/*
        버튼을 클릭했을 때
        1. 입력상자의 서버 IP 주소와 전송할 데이터 가져오기
        2. 소켓통신을 위한 스레드의 매개변수로 넣어주어 스레드 객체 생성
        3. 스레드 시작
        */</span>
        <span class="n">socketConnectBtn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="nc">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">addr</span> <span class="o">=</span> <span class="n">addressInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
                <span class="n">str</span> <span class="o">=</span> <span class="n">dataInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
                <span class="nc">SocketThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SocketThread</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">str</span><span class="o">);</span>
                <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">SocketThread</span> <span class="kd">extends</span> <span class="nc">Thread</span><span class="o">{</span>

        <span class="nc">String</span> <span class="n">host</span><span class="o">;</span> <span class="c1">// 서버 IP</span>
        <span class="nc">String</span> <span class="n">data</span><span class="o">;</span> <span class="c1">// 전송 데이터</span>

        <span class="kd">public</span> <span class="nf">SocketThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">host</span><span class="o">,</span> <span class="nc">String</span> <span class="n">data</span><span class="o">){</span>
            <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">host</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>

            <span class="k">try</span><span class="o">{</span>
                <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">5555</span><span class="o">;</span> <span class="c1">//포트 번호는 서버측과 똑같이</span>
                <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span> <span class="c1">// 소켓 열어주기</span>
                <span class="nc">ObjectOutputStream</span> <span class="n">outstream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span> <span class="c1">//소켓의 출력 스트림 참조</span>
                <span class="n">outstream</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">data</span><span class="o">);</span> <span class="c1">// 출력 스트림에 데이터 넣기</span>
                <span class="n">outstream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span> <span class="c1">// 출력</span>

                <span class="nc">ObjectInputStream</span> <span class="n">instream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span> <span class="c1">// 소켓의 입력 스트림 참조</span>
                <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">instream</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span> <span class="c1">// 응답 가져오기</span>

                <span class="cm">/* 토스트로 서버측 응답 결과 띄워줄 러너블 객체 생성하여 메인스레드 핸들러로 전달 */</span>
                <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                        <span class="nc">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="nc">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">"서버 응답 : "</span> <span class="o">+</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">});</span>

                <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 소켓 해제</span>

            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기서 중요한 것이 있다.</p>

<p><strong>안드로이드에서는 네트워킹을 반드시 새로운 스레드를 통해서 해야한다.</strong> 최신 버전부터 이렇게 변경되었다. 따라서 네트워킹을 통해 UI를 업데이트 할 때는 메인 스레드의 핸들러를 통해서 해야한다.</p>

<p>아무튼 버튼을 클릭했을 때 새로운 스레드를 만들고 소켓을 뚫은다음 소켓의 출력 스트림을 통해 데이터를 내보내주는 것이 전부이다. 이 때 소켓 생성 시 서버IP와 연결할 포트번호를 매개변수로 전달해주어야한다.</p>

<p>또한 네트워크 통신을 하기위해 매니페스트 파일을 열고 다음과 같이 인터넷 권한을 부여한다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.INTERNET"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>먼저 이클립스에서 클래스를 실행하면 다음과 같은 화면을 볼 수 있다.</p>

<p><img src="/images/android/50/1.png" alt="1" width="100%" height="100%" /></p>

<p><br /></p>

<p>이제 안드로이드 앱을 실행한 아래 사진과 같이 다음 IP주소와 보낼 데이터를 입력하고 보내면 된다.</p>

<p><img src="/images/android/50/2.jpg" alt="2" width="30%" height="30%" /></p>

<p>서버 IP주소는 PC에서 네트워크 및 공유센터에서 확인하면 된다. 아무튼 코드를 작성한대로 서버에서 받은 데이터에 “ from server” 라는 문자열을 덧붙여서 응답으로 보내는 것을 볼 수 있다.</p>

<p><br /></p>

<p>이 때, 서버측으로 다시 돌아가서 출력 결과를 마저 확인해보자.</p>

<p><img src="/images/android/50/3.png" alt="3" width="100%" height="100%" /></p>

<p>코드에서 <code class="highlighter-rouge">System.out.println()</code>을 통해 클라이언트의 IP주소와 포트 번호를 확인할 수 있도록 해놓았었다. 또한 받은 데이터 역시 출력하도록 했었다. 그 결과를 위 출력화면에서 확인할 수 있다.</p>

<p><br /></p>

<p>아주 간단한 기능만 하는 서버와 클라이언트를 작성했지만, 이 내용은 안드로이드에서 네트워크를 사용하기 위한 기본이 된다. 결국 모바일 게임등의 네트워크가 필요한 애플리케이션들은 모두 위의 내용을 기초하여 구현하는 것이기 때문이다.</p>
:ET
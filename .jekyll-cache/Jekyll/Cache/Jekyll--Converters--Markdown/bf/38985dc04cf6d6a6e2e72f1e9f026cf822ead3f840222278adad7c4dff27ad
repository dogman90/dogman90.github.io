I"B<p> </p>

<ul>
  <li>딕셔너리는 대응관계를 나타내는 자료형이다.</li>
  <li>딕셔너리는 리스트, 튜플처럼 순차적인 요소가 아닌 key를 통해 value를 얻는 key : value 의 대응요소를 가지고 있다.</li>
</ul>

<p> </p>

<h1 id="1-딕셔너리-표현방식">1. 딕셔너리 표현방식</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">person</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'John'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="s">'phone'</span><span class="p">:</span><span class="s">'010-0000-1234'</span><span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>딕셔너리 자료형 person의 key는 ‘name’, ‘age’, ‘phone’ 이다.</li>
  <li>딕셔너리 자료형 person의 value는 ‘John’, 20, ‘010-0000-1234’ 이다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]}</span> <span class="c1"># value로 리스트 자료형도 가능하다.
</span><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:(</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">)}</span> <span class="c1"># value로 튜플 자료형도 가능하다.
</span></code></pre></div></div>

<p> </p>

<h1 id="2-딕셔너리-쌍-추가">2. 딕셔너리 쌍 추가</h1>
<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="s">'a'</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># {1: 'a'}
</span>
<span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">'b'</span> <span class="c1"># 2: 'b' 쌍 추가
</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># {1: 'a', 2: 'b'}
</span>
<span class="n">a</span><span class="p">[</span><span class="s">'age'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span> <span class="c1"># 'age': 20 쌍 추가
</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># {1: 'a', 2: 'b', 'age': 20}
</span>
<span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="c1"># 3: [10,20] 쌍 추가
</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># {1: 'a', 2: 'b', 'age': 20, 3:[10,20]}
</span></code></pre></div></div>

<p> </p>

<p>참고로 딕셔너리에서는 순차적으로 요소를 구하지 않고 key로 value를 얻으므로 순서는 신경쓸 필요 없다.</p>

<p> </p>

<h1 id="3-딕셔너리-쌍-삭제">3. 딕셔너리 쌍 삭제</h1>

<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># 현재 a = {1: 'a', 2: 'b', 'age': 20, 3: [10,20]}
</span>
<span class="k">del</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1">#key가 2인 key:value 쌍 삭제  &lt;&lt; del a[key] 는 a의 key:value 쌍 삭제
</span></code></pre></div></div>

<p>a의 index 2 항목이 아니라는 것을 명심해야한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># {1: 'a', 'age': 20, 3: [10,20]}
</span></code></pre></div></div>

<p> </p>

<p> </p>

<p> </p>

<h1 id="4-딕셔너리-쌍-사용">4. 딕셔너리 쌍 사용</h1>

<hr />

<ul>
  <li>딕셔너리 자료형은 보통 공통의 분류 항목에 대한 다른 값을 저장할 때 쓴다.</li>
  <li>이는 리스트나 튜플 자료형으로 표현하기는 어렵다.</li>
</ul>

<p>각 휴대폰 브랜드마다 제조사의 데이터를 담고 싶은 경우를 예로 들어보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span> <span class="o">=</span> <span class="p">{</span><span class="s">'galaxy'</span><span class="p">:</span><span class="s">'Samsung'</span><span class="p">,</span> <span class="s">'V20'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'G8'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'vega'</span><span class="p">:</span><span class="s">'PanTech'</span><span class="p">,</span> <span class="s">'iPhone'</span><span class="p">:</span><span class="s">'Apple'</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="p">[</span><span class="s">'vega'</span><span class="p">])</span> <span class="c1"># 'PanTech'
</span><span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="p">[</span><span class="s">'galaxy'</span><span class="p">])</span> <span class="c1"># 'Samsung'&lt;code&gt;&lt;/code&gt;
</span></code></pre></div></div>

<ul>
  <li>리스트나 튜플에서는 인덱싱, 슬라이싱을 활용해 요소를 얻었다.</li>
  <li>딕셔너리에서는 key를 이용하는 방법 하나 뿐이다.</li>
  <li>딕셔너리 변수[key] 를 이용해서 key에 해당하는 value를 얻는다.</li>
</ul>

<p> </p>

<p> </p>

<h1 id="5-주의사항">5. 주의사항</h1>

<hr />

<ul>
  <li>key 중복 금지</li>
  <li>딕셔너리에서 key는 고유한 값이어야 한다.</li>
  <li>같은 key값이 2개 이상 존재할 경우 1나를 제외한 나머지는 모두 무시된다.</li>
  <li>어떤 key값이 무시될 지는 예측할 수 없다. 따라서 중복되지 않도록 주의하자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'John'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="s">'name'</span><span class="p">:</span><span class="s">'Kelly'</span><span class="p">,</span> <span class="s">'name'</span><span class="p">:</span><span class="s">'Jack'</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s">'name'</span><span class="p">])</span> <span class="c1"># 'John' 혹은 'Kelly' 혹은 'Jack'
</span></code></pre></div></div>

<p> </p>

<ul>
  <li>key로 리스트 자료형 사용 금지</li>
  <li>리스트 자료형은 그 값이 변할 수 있기 때문에 key로 사용 불가능</li>
  <li>key로 튜플 자료형은 사용 가능하다.</li>
  <li>튜플 자료형은 그 값이 변하지 않기 때문에 key로 사용 가능하다.</li>
  <li>딕셔너리의 key로 사용할 수 있냐 없냐는 값이 변할 수 있느냐 없느냐에 달려있다.</li>
  <li>딕셔너리의 value로는 변하는 값이든 변하지 않는 값이든 사용 가능하다.</li>
</ul>

<p> </p>

<p> </p>

<p> </p>

<h1 id="6-딕셔너리-관련-함수">6. 딕셔너리 관련 함수</h1>

<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span> <span class="o">=</span> <span class="p">{</span><span class="s">'galaxy'</span><span class="p">:</span><span class="s">'Samsung'</span><span class="p">,</span> <span class="s">'V20'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'G8'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'vega'</span><span class="p">:</span><span class="s">'PanTech'</span><span class="p">,</span> <span class="s">'iPhone'</span><span class="p">:</span><span class="s">'Apple'</span><span class="p">}</span>
</code></pre></div></div>

<p> </p>

<p><strong>1) key로 이루어진 list 만들기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="c1"># 딕셔너리 phone의 key들로만 이루어진 dict_keys 객체를 리턴
</span><span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span> <span class="c1"># dict_keys(['galaxy', 'V20', 'G8', 'vega', 'iPhone'])
</span><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span> <span class="c1"># ['galaxy', 'V20', 'G8', 'vega', 'iPhone']
</span></code></pre></div></div>

<p> </p>

<ul>
  <li>list를 만들고 싶으면 list() 함수를 사용하면 된다.</li>
  <li>Python 3.0 버전 이전에는 애초에 list를 리턴하였으나 3.0 이후 메모리 낭비의 문제로 dict_keys로 리턴</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">phone</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="s">" is made by "</span><span class="o">+</span><span class="n">phone</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
</code></pre></div></div>

<p> </p>

<p>list() 함수를 써서 리스트로 변환하지 않더라도 dict_keys의 요소에 관한 반복문을 실행할 수 있다.</p>

<p><strong>2) value로 이루어진 list 만들기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="c1"># 딕셔너리 phone의 value들로만 이루어진 dict_values 객체 리턴
</span><span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="c1"># dict_values(['Samsung', 'LG', 'LG', 'PanTech', 'Apple'])
</span><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span> <span class="c1"># ['Samsung', 'LG', 'LG', 'PanTech', 'Apple']
</span></code></pre></div></div>

<p> </p>

<p><strong>3) key,value 쌍 구하기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="c1"># dict_items([('galaxy','Samsung'), ('V20','LG'),('G8','LG'),('vega','PanTech'),('iPhone','Apple')])
</span></code></pre></div></div>

<p>dict_keys, dict_values, dict_items 등의 객체는 정수, 문자열, 리스트 등과는 다르게 하나의 사용자 정의 자료형이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="c1"># dict_items([('galaxy','Samsung'), ('V20','LG'),('G8','LG'),('vega','PanTech'),('iPhone','Apple')])
### dict_keys, dict_values, dict_items 등의 객체는 정수, 문자열, 리스트 등과는 다르게 하나의 사용자 정의 자료형이다.
</span><span class="nb">type</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">items</span><span class="p">())</span> <span class="c1"># &lt;class 'dict_items'&gt;
</span><span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">items</span><span class="p">())</span> <span class="c1"># [('galaxy','Samsung'), ('V20','LG'),('G8','LG'),('vega','PanTech'),('iPhone','Apple')]
</span><span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1"># &lt;class 'list'&gt;
</span><span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># &lt;class 'tuple'&gt;
</span></code></pre></div></div>

<p> </p>

<p>list(phone.items())는 리스트 안에 튜플이 있는 구조인 것이었다.</p>

<p><strong>4) key,value 쌍 지우기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span> <span class="c1"># 딕셔너리 phone 요소들 모두 지우기
</span><span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span> <span class="c1"># {}
</span></code></pre></div></div>

<p> </p>

<p><strong>5) key로 value를 얻는 또다른 방법 .get() 함수</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span> <span class="o">=</span> <span class="p">{</span><span class="s">'galaxy'</span><span class="p">:</span><span class="s">'Samsung'</span><span class="p">,</span> <span class="s">'V20'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'G8'</span><span class="p">:</span><span class="s">'LG'</span><span class="p">,</span> <span class="s">'vega'</span><span class="p">:</span><span class="s">'PanTech'</span><span class="p">,</span> <span class="s">'iPhone'</span><span class="p">:</span><span class="s">'Apple'</span><span class="p">}</span>
<span class="n">phone</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'vega'</span><span class="p">)</span> <span class="c1"># 'PanTech'
</span></code></pre></div></div>

<p>phone[‘vega’]와 phone.get(‘vega’)는 같은 결과를 return 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phone</span><span class="p">[</span><span class="s">'G4'</span><span class="p">]</span> <span class="c1"># phone에 'G4'라는 key가 없어서 Key Error를 일으킨다.
</span><span class="n">phone</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'G4'</span><span class="p">)</span> <span class="c1"># phone에 'G4'라는 key가 없어서 None을 반환한다.
</span><span class="k">print</span><span class="p">(</span><span class="n">phone</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'G4'</span><span class="p">))</span> <span class="c1"># None
</span></code></pre></div></div>

<p> </p>

<p><strong>6) 해당 key가 딕셔너리에 존재하는지 조사하기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">'galaxy'</span> <span class="ow">in</span> <span class="n">phone</span> <span class="c1"># True 리턴
</span><span class="s">'G4'</span> <span class="ow">in</span> <span class="n">phone</span> <span class="c1"># False 리턴
</span></code></pre></div></div>

:ET
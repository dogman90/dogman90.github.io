I"M-<h1 id="1-static-변수">1. static 변수</h1>

<hr />

<p>static 변수는 클래스 안에서 선언되지만, 모든 인스턴스가 공유하는 변수이다. 일반 멤버변수는 인스턴스가 생성될 때 마다 각각의 인스턴스에 할당되었는데 static변수는 모든 인스턴스가 공유하는 것이다.</p>

<p>static변수를 선언하는 방법은 아래와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nf">int</span> <span class="o">(</span><span class="n">변수명</span><span class="o">)=</span> <span class="mi">1</span><span class="o">;</span>
</code></pre></div></div>

<p> </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">classpart</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">serialNum</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">//모든 인스턴스가 공유하는 static 변수</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">id</span><span class="o">=</span><span class="mi">1000</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
       <span class="n">id</span> <span class="o">+=</span> <span class="n">serialNum</span><span class="o">++;</span> <span class="c1">//id의 초기값 1000에 serialNum을 더하고 serialNum은 1 증가</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getID</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p> </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">classpart</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">Student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span> <span class="c1">//새로운 인스턴스를 만들 때 마다 serialNum 1 증가 id = 1000+serialNum</span>
       <span class="nc">Student</span> <span class="n">stu2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
       <span class="nc">Student</span> <span class="n">stu3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
       
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu1</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu2</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu3</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실행결과</p>

<p>1001</p>

<p>1002</p>

<p>1003</p>

<p>serialNum은 static변수로 그 값이 계속 유지되고 모든 인스턴스가 공유한다. 따라서 이와 같이 학생 한 명이 생길 때 마다 기존의 학번에 1을 더한 수를 학번으로 부여하고 싶은 경우 사용하기 유용하다.</p>

<p>static 변수는 클래스를 선언하는 시점 메모리에 할당되기 때문에 인스턴스보다 먼저 생성된다. 이러한 이유로 static변수를 <strong>class변수</strong>라고도 부르며 인스턴스 이름뿐 아니라 클래스 이름으로도 참조하여 사용 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">classpart</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">Student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
       <span class="nc">Student</span> <span class="n">stu2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
       
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu1</span><span class="o">.</span><span class="na">serialNum</span><span class="o">);</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu2</span><span class="o">.</span><span class="na">serialNum</span><span class="o">);</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">serialNum</span><span class="o">);</span> <span class="c1">//클래스 이름으로 접근</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스명, 인스턴스명 모두를 통해 참조할 수 있지만 static변수는 일반적으로 클래스명을 통해 참조하는 것이 관례이다. static변수는 인스턴스가 생성되기 이전부터 사용할 수 있기 때문이다.</p>

<p> </p>

<p> </p>

<h1 id="2-static-메소드">2. static 메소드</h1>

<hr />

<p>static변수를 위한 메소드이다. 메소드를 정의할 때 static선언자를 붙여서 선언하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">classpart</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">serialNum</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">id</span><span class="o">=</span><span class="mi">1000</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setSerialNum</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">Student</span><span class="o">.</span><span class="na">serialNum</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getSerialNum</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">serialNum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p> </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">classpart</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">Student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
       
       <span class="nc">Student</span><span class="o">.</span><span class="na">setSerialNum</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">getSerialNum</span><span class="o">());</span>
       
       <span class="n">stu1</span><span class="o">.</span><span class="na">setSerialNum</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Student</span><span class="o">.</span><span class="na">getSerialNum</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실행결과</p>

<p>10</p>

<p>20</p>

<p>메소드를 만들 때 static을 붙였기 때문에 클래스명을 통해 setSerialNum 메소드를 참조할 수 있었다.</p>

<p>static메소드는 <strong>클래스 메소드</strong>라고도 부른다.</p>

<p>클래스 메소드에는 주의해야 할 것이 있는데 클래스 메소드 내부에는 일반 멤버변수가 올 수 없다. 클래스 메소드는 인스턴스가 생성되지 않아도 사용할 수 있어야 하는데 일반 멤버변수는 인스턴스가 생성되면서 메모리에 할당이 되기 때문이다. 클래스 메소드 내부에 올 수 있는 변수는 클래스 변수 혹은 그 메소드의 지역변수 뿐이다.</p>
:ET
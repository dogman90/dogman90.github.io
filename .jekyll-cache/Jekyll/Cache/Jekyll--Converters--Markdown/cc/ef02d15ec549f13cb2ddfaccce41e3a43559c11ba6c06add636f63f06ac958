I"vP<p>서브 스레드에서 UI작업을 하기위해 핸들러를 사용하여 메인 스레드로 message나 Runnable 객체를 전달하는 방법이 있다. 하지만 이 방법은 코드가 복잡해지고 불편한 구석이 많다. 그런데 AsyncTask 클래스를 사용하면 UI작업과 백그라운드 작업을 동시에 할 수 있어 엄청 편리하다. AsyncTask객체는 메인스레드에서 처리할 작업과 서브스레드에서 처리할 작업을 서로 다른 메소드로 분리해놓았으므로 적당한 메소드에 처리할 작업의 코드를 작성하여 필요할 때 호출하여 실행하면 된다.</p>

<p>AsyncTask의 동작방식을 그림으로 보자.</p>

<p><img src="/images/android/48/1.png" alt="1" width="100%" height="100%" /></p>

<p>각 메소드에 대한 설명을 보자.</p>

<table>
  <thead>
    <tr>
      <th>메소드</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>doInBackground()</td>
      <td>서브 스레드에서 백그라운드 작업을 수행한다. AsyncTask객체의 execute() 메소드를 호출할 때 사용된 파라미터를 전달받는다.</td>
    </tr>
    <tr>
      <td>onPreExecute()</td>
      <td>백그라운드 작업 수행 중 호출. 초기화 작업에 사용된다.</td>
    </tr>
    <tr>
      <td>onProgressUpdate()</td>
      <td>백그라운드 작업 중간중간 UI객체에 접근할 때 사용하며 호출을 하기위해서는 백그라운드 작업 중 publishProgressed() 메소드를 호출하면 된다.</td>
    </tr>
    <tr>
      <td>onPostExecute()</td>
      <td>백그라운드 작업이 끝난 후 호출된다. 사용된 리소스의 해제 작업 등에 사용된다. 백그라운드 작업의 결과가 Result 타입의 파라미터로 전달된다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>추가적으로 알아야 할 메소드가 2개 더 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AsyncTask</span><span class="o">.</span><span class="na">cancel</span><span class="o">()</span> <span class="c1">//태스크가 실행되고 있는 중에 강제로 끝내기</span>
<span class="n">publishProgress</span><span class="o">()</span> <span class="c1">// onProgressUpdate() 메소드 호출</span>
</code></pre></div></div>

<p><br /></p>

<p>실제로 사용하면서 이해해보자. 프로그레스바를 만들어 백그라운드에서 진행률을 증가시킬 것이고 이 값을 통해 메인 스레드에서는 프로그레스바의 진행상태를 업데이트하는 간단한 앱을 만들어볼 것이다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/textView"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:text=</span><span class="s">"진행"</span>
        <span class="na">android:textSize=</span><span class="s">"20dp"</span>
        <span class="na">android:textColor=</span><span class="s">"#ff000000"</span>
        <span class="na">android:textStyle=</span><span class="s">"bold"</span>
        <span class="na">android:layout_margin=</span><span class="s">"10dp"</span><span class="nt">/&gt;</span>

   <span class="nt">&lt;ProgressBar</span>
       <span class="na">android:id=</span><span class="s">"@+id/progressBar"</span>
       <span class="na">style=</span><span class="s">"?android:attr/progressBarStyleHorizontal"</span>
       <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
       <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
       <span class="na">android:layout_margin=</span><span class="s">"10dp"</span>
       <span class="na">android:max=</span><span class="s">"100"</span>
       <span class="na">android:background=</span><span class="s">"#22000000"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;LinearLayout</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
        <span class="na">android:orientation=</span><span class="s">"horizontal"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"10dp"</span>
        <span class="na">android:gravity=</span><span class="s">"center_horizontal"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;Button</span>
            <span class="na">android:id=</span><span class="s">"@+id/executeBtn"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"실행"</span>
            <span class="na">android:textSize=</span><span class="s">"24dp"</span>
            <span class="na">android:layout_marginRight=</span><span class="s">"10dp"</span>
            <span class="na">android:textStyle=</span><span class="s">"bold"</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;Button</span>
            <span class="na">android:id=</span><span class="s">"@+id/cancelBtn"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"취소"</span>
            <span class="na">android:textSize=</span><span class="s">"24dp"</span>
            <span class="na">android:layout_marginLeft=</span><span class="s">"10dp"</span>
            <span class="na">android:textStyle=</span><span class="s">"bold"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;/LinearLayout&gt;</span>


<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div>

<p>텍스트뷰는 현재 진행 정도를 나타내기위한 것이다. 진행 버튼을 클릭하면 태스크 시작, 취소 버튼을 누르면 중도에 태스크를 취소하도록 할 것이다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>

    <span class="nc">TextView</span> <span class="n">textView</span><span class="o">;</span>
    <span class="nc">ProgressBar</span> <span class="n">progressBar</span><span class="o">;</span>
    <span class="nc">Backgroundtask</span> <span class="n">task</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>

        <span class="n">textView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">);</span>
        <span class="n">progressBar</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">progressBar</span><span class="o">);</span>

        <span class="nc">Button</span> <span class="n">executeBtn</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">executeBtn</span><span class="o">);</span>
        <span class="nc">Button</span> <span class="n">cancelBtn</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">cancelBtn</span><span class="o">);</span>

        <span class="cm">/* 실행 버튼을 클릭하여 새로운 태스크 생성 후 실행 */</span>
        <span class="n">executeBtn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="nc">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Backgroundtask</span><span class="o">();</span>
                <span class="n">task</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="cm">/* 취소 버튼을 누르면 태스크 취소 */</span>
        <span class="n">cancelBtn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="nc">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">task</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/* AsyncTask 클래스 상속하여 백그라운드 태스크 클래스 정의 */</span>
    <span class="kd">class</span> <span class="nc">Backgroundtask</span> <span class="kd">extends</span> <span class="nc">AsyncTask</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;{</span>

        <span class="cm">/* 백그라운드 작업 이전에 프로그레스바 진행률 0으로 초기화 */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPreExecute</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="cm">/* 백그라운드 작업 정의
         * 1. value값 1 증가
          * 2. publishProgress() 호출 -&gt; onProgressUpdate() 호출 -&gt; UI 업데이트
          * 3. 100ms 간격 주기 */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="nc">Integer</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">integers</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">isCancelled</span><span class="o">()){</span>
                <span class="n">value</span><span class="o">++;</span> <span class="c1">//진행률 1 증가</span>
                <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">100</span><span class="o">){</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="c1">// value값 파라미터로 전달하면서 onProgressUpdate() 메소드 호출</span>
                    <span class="n">publishProgress</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="k">try</span><span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">// 100ms 시간 지연</span>
                <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
            <span class="cm">/* 백그라운드 작업 완료 후 return 한 것은 onPostExecute() 메소드의 파라미터로 전달된다. */</span>
        <span class="o">}</span>

        <span class="cm">/* 백그라운드 작업 중간에 프로그레스바 진행률 업데이트
         * 전달받은 값이 value 하나이므로 values[0]으로 value값 참조 */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onProgressUpdate</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">intValue</span><span class="o">());</span>
            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"현재 진행률: "</span> <span class="o">+</span> <span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="cm">/* 백그라운드 작업 끝난 이후 호출
         * result는 doInBackground() 메소드의 리턴값이다. */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"완료!"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="cm">/* 취소 버튼 눌렸을 때 호출 */</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCancelled</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"취소됨"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>먼저 AsyncTask 클래스를 상속하여 BackgroundTask 클래스를 정의하였다. 클래스를 정의할 때 제네릭 자료형을 3개 정의한다.</p>
<ul>
  <li>첫 번째 제네릭은 <code class="highlighter-rouge">doInBackground()</code> 메소드의 파라미터로 전달될 자료형이다.</li>
  <li>두 번재 제네릭은 <code class="highlighter-rouge">onProgressUpdate()</code> 메소드의 파라미터로 전달될 자료형으로, <code class="highlighter-rouge">publishProgress()</code> 메소드를 호출하면서 파라미터로 전달하면 <code class="highlighter-rouge">onProgressUpdate()</code> 메소드가 호출되면서 파라미터로 전달된다.</li>
  <li>세 번째 제네릭은 <code class="highlighter-rouge">onPostExecute()</code> 메소드의 파라미터로 전달될 자료형이다. <code class="highlighter-rouge">doInBackground()</code> 메소드가 종료되면서 이 자료형의 데이터를 return하면 <code class="highlighter-rouge">onPostExecute()</code> 메소드에서 파라미터로 전달받는다.</li>
</ul>

<p>코드를 보면 백그라운드 작업을 하면서 100ms마다 한 번씩 value 값을 1씩 증가시키고 <code class="highlighter-rouge">publishProgress()</code> 메소드를 호출하면서 파라미터로 전달한다. 그러면 <code class="highlighter-rouge">onProgressUpdate()</code> 메소드가 호출되면서 프로그레스바와 텍스트뷰 UI에 접근하여 업데이트한다. 이 메소드의 코드는 메인 스레드에서 처리되므로 UI객체에 접근할 수 있는것이다.</p>

<p>그리고 <code class="highlighter-rouge">doInBackground()</code> 메소드가 끝이나면 value를 리턴한다. 이후 이 값이 <code class="highlighter-rouge">onPostExecute()</code> 메소드가 호출되면서 파라미터로 전달된다. 이어서 프로그레스바의 값으로 설정이 되고 텍스트뷰의 텍스트가 “완료!”로 설정된다.</p>

<p>진행 도중에 취소버튼을 누르면 <code class="highlighter-rouge">task.cancel()</code> 메소드가 호출되고 <code class="highlighter-rouge">isCancelled()</code> 메소드가 false를 반환하여 <code class="highlighter-rouge">doInBackground()</code> 메소드의 while문을 탈출한다. 이어서 자동으로 <code class="highlighter-rouge">onCancelled()</code> 메소드가 호출되어 프로그레스바의 값을 0으로 초기화시키고 텍스트뷰의 텍스트를 “취소됨”으로 설정한다.</p>

<p>앱을 실행하면 다음의 결과를 볼 수 있다.</p>

<p><img src="/images/android/48/2.jpg" alt="2" width="30%" height="30%" />
<img src="/images/android/48/3.jpg" alt="3" width="30%" height="30%" />
<img src="/images/android/48/4.jpg" alt="4" width="30%" height="30%" /></p>
:ET
I"ac<p>다형성은 클래스의 형 변환과 가상 메소드 개념의 장점을 최대한 활용하는 객체지향의 매우 핵심적인 개념이다.</p>

<p>결국 다형성이란 것은 하위 클래스 객체를 상위 클래스 자료형으로 변환 가능하다는 사실, 그러나 참조자료형이 호출하는 메소드는 인스턴스 객체에 좌우된다는 사실이 핵심이자 전부이다. 다만 이것을 최대한 활용하는 개념인 것이다.</p>

<p> </p>

<h1 id="1-다형성이란">1. 다형성이란?</h1>

<hr />

<p>다형성이란 상위 클래스와 이를 상속받는 여러 하위클래스들이 같은 이름의 메소드를 호출하면서도 객체의 자료형마다 재정의 된 코드를 실행할 수 있는 편리한 방법이다. 코드를 통해 무슨 말인지 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"animal moves"</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="kd">extends</span> <span class="nc">Animal</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"human walks"</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tiger</span> <span class="kd">extends</span> <span class="nc">Animal</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"tiger runs"</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Eagle</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"eagle flys"</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Animal이라는 상위 클래스와 이를 상속하는 Human, Tiger, Eagle 클래스가 있다. 그리고 각각 move() 메소드를 재정의하고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnimalTest</span> <span class="o">{</span>

   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">AnimalTest</span> <span class="n">animalTest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnimalTest</span><span class="o">();</span>
      <span class="nc">Human</span> <span class="n">human</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">();</span>
      <span class="nc">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tiger</span><span class="o">();</span>
      <span class="nc">Eagle</span> <span class="n">eagle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">();</span>
      
      <span class="n">animalTest</span><span class="o">.</span><span class="na">moveAnimal</span><span class="o">(</span><span class="n">human</span><span class="o">);</span>
      <span class="n">animalTest</span><span class="o">.</span><span class="na">moveAnimal</span><span class="o">(</span><span class="n">tiger</span><span class="o">);</span>
      <span class="n">animalTest</span><span class="o">.</span><span class="na">moveAnimal</span><span class="o">(</span><span class="n">eagle</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="c1">//매개변수로 Animal 자료형 참조변수를 넣어준다.</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveAnimal</span><span class="o">(</span><span class="nc">Animal</span> <span class="n">animal</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">animal</span><span class="o">.</span><span class="na">move</span><span class="o">();</span>
   <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>위 코드를 실행시키면 다음과 같은 결과가 나온다.</p>

<p>human walks</p>

<p>tiger runs</p>

<p>eagle flys</p>

<p>moveAnimal 메소드의 매개변수의 자료형은 Animal이다. 따라서 하위 클래스인 Human, Tiger, Eagle 모든 객체가 올 수 있다. 하위 클래스 객체의 상위 클래스 자료형으로의 형 변환을 이용한 것이다. 그런데 더 놀라운 것은 각각의 참조변수가 참조하는 객체마다 각자 자신이 참조하는 다른 메소드가 실행된다는 것이다.</p>

<p>매개변수의 자료형을 상위 클래스의 자료형으로 퉁쳐서 코드를 한 줄만 구현하고도 전달되는 객체마다 서로 다른 메소드가 실행될 수 있다는 것이다. 또 다른 포유류를 상속받는 몇개의 클래스가 추가되더라도 이 부분은 달라질 필요가 없는 것이다.</p>

<p> </p>

<p> </p>

<h1 id="2-배열과-다형성">2. 배열과 다형성</h1>

<hr />

<p>하나의 상위 클래스를 상속받는 여러 개의 하위 클래스 객체들이 여러 개 있을 때는 같은 상위 클래스 타입 자료형으로 선언할 수 있으므로 배열로 관리하는 것이 편리하다. 다음 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="c1">//상위 Customer 클래스</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
   <span class="kd">protected</span> <span class="kt">int</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="kd">protected</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="kd">protected</span> <span class="nc">String</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="kt">int</span> <span class="n">bonusPoint</span><span class="o">;</span>
   <span class="kt">double</span> <span class="n">bonusRatio</span><span class="o">;</span>
   
   <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">initCustomer</span><span class="o">();</span>
   <span class="o">}</span>
   <span class="c1">//객체 생성과 동시에 고객번호와 이름 필수로 정의</span>
   <span class="kd">public</span> <span class="nf">Customer</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerID</span> <span class="o">=</span> <span class="n">customerID</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerName</span> <span class="o">=</span> <span class="n">customerName</span><span class="o">;</span>
      <span class="n">initCustomer</span><span class="o">();</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calcPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">bonusPoint</span> <span class="o">+=</span> <span class="n">price</span> <span class="o">*</span> <span class="n">bonusRatio</span><span class="o">;</span> <span class="c1">// 보너스 포인트 적립</span>
      <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initCustomer</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">customerGrade</span> <span class="o">=</span> <span class="s">"SILVER"</span><span class="o">;</span>
      <span class="n">bonusRatio</span> <span class="o">=</span> <span class="mf">0.01</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showCustomerInfo</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerName</span><span class="o">+</span><span class="s">"'s grade is "</span><span class="o">+</span><span class="n">customerGrade</span><span class="o">+</span><span class="s">" and bonus point is "</span><span class="o">+</span><span class="n">bonusPoint</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCustomerID</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerID</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerID</span> <span class="o">=</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCustomerName</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerName</span><span class="o">(</span><span class="nc">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerName</span> <span class="o">=</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCustomerGrade</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerGrade</span><span class="o">(</span><span class="nc">String</span> <span class="n">customerGrade</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerGrade</span> <span class="o">=</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>
<span class="c1">//Customer를 상속하는 VIPCustomer</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VIPCustomer</span> <span class="kd">extends</span> <span class="nc">Customer</span><span class="o">{</span>
   <span class="kd">private</span> <span class="kt">int</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="kt">double</span> <span class="n">saleRatio</span><span class="o">;</span>
   
   <span class="c1">// 상위클래스의 생성자가 고객번호와 이름을 매개변수로 받으므로 이를 super()에 전달하고 담당 직원번호 정의</span>
   <span class="kd">public</span> <span class="nf">VIPCustomer</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">agentID</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">(</span><span class="n">customerID</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
      <span class="n">customerGrade</span> <span class="o">=</span> <span class="s">"VIP"</span><span class="o">;</span>
      <span class="n">bonusRatio</span> <span class="o">=</span> <span class="mf">0.05</span><span class="o">;</span>
      <span class="n">saleRatio</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">agentID</span> <span class="o">=</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">agentID</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="c1">//메소드 재정의</span>
   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showCustomerInfo</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">showCustomerInfo</span><span class="o">()+</span><span class="s">". The agentID is "</span><span class="o">+</span><span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="c1">//메소드 재정의</span>
   <span class="nd">@Override</span> <span class="c1">//컴파일러에게 메소드 오버라이딩임을 알려줌</span>
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calcPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">bonusPoint</span> <span class="o">+=</span> <span class="n">price</span><span class="o">*</span><span class="n">bonusRatio</span><span class="o">;</span>
      <span class="k">return</span> <span class="n">price</span><span class="o">-(</span><span class="kt">int</span><span class="o">)(</span><span class="n">price</span><span class="o">*</span><span class="n">saleRatio</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>
<span class="c1">//Customer를 상속받는 GoldCustomer</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GoldCustomer</span> <span class="kd">extends</span> <span class="nc">Customer</span><span class="o">{</span>
   
   <span class="kt">double</span> <span class="n">saleRatio</span><span class="o">;</span>
   
   <span class="kd">public</span> <span class="nf">GoldCustomer</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">(</span><span class="n">customerID</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
      <span class="n">customerGrade</span> <span class="o">=</span> <span class="s">"GOLD"</span><span class="o">;</span>
      <span class="n">bonusRatio</span> <span class="o">=</span> <span class="mf">0.02</span><span class="o">;</span>
      <span class="n">saleRatio</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">;</span>
   <span class="o">}</span>
   <span class="c1">//메소드 재정의</span>
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calcPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">bonusPoint</span> <span class="o">+=</span> <span class="n">price</span><span class="o">*</span><span class="n">bonusRatio</span><span class="o">;</span>
      <span class="k">return</span> <span class="n">price</span><span class="o">-(</span><span class="kt">int</span><span class="o">)(</span><span class="n">price</span><span class="o">*</span><span class="n">saleRatio</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p> </p>

<p>VIPCustomer와 GoldCustomer는 Customer를 상속하고 메소드를 재정의 하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerTest</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">customers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;();</span>
      <span class="c1">//배열 요소의 자료형이 Customer이므로 상속받는 클래스 객체가 추가될 수 있다.</span>
      <span class="n">customers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Customer</span><span class="o">(</span><span class="mi">10010</span><span class="o">,</span> <span class="s">"Kelly"</span><span class="o">));</span>
      <span class="n">customers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">VIPCustomer</span><span class="o">(</span><span class="mi">10020</span><span class="o">,</span> <span class="s">"John"</span><span class="o">,</span> <span class="mi">12334</span><span class="o">));</span>
      <span class="n">customers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">GoldCustomer</span><span class="o">(</span><span class="mi">10030</span><span class="o">,</span> <span class="s">"Tomson"</span><span class="o">));</span>
      
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">calcPrice</span><span class="o">(</span><span class="mi">10000</span><span class="o">));</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">calcPrice</span><span class="o">(</span><span class="mi">10000</span><span class="o">));</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">calcPrice</span><span class="o">(</span><span class="mi">10000</span><span class="o">));</span>
      
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">showCustomerInfo</span><span class="o">());</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">showCustomerInfo</span><span class="o">());</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">showCustomerInfo</span><span class="o">());</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실행결과</p>

<p>10000</p>

<p>9000</p>

<p>9000</p>

<p>Kelly’s grade is SILVER and bonus point is 100</p>

<p>John’s grade is VIP and bonus point is 500. The agentID is 12334</p>

<p>Tomson’s grade is GOLD and bonus point is 200</p>

<p>배열의 자료형을 Customer로 선언하였지만 이를 상속하는 모든 클래스의 객체를 추가할 수 있었다. 더군다나 각 객체가 메소드를 호출하면 객체의 자료형에 따른 서로 다른 메소드가 호출된다.</p>

<p>만약 상속고 다형성을 사용하지 않고 모든 등급의 변수와 메소드를 하나의 클래스 파일에 때려넣으면 bonusPoint라던지 saleRatio, 심지어 모든 메소드도 if else문을 사용하여 고객 등급마다 서로 다른 내용을 구현해야 할 것이다. 이렇게 되면 코드가 복잡해지고 새로운 등급이 추가되는 경우 코드 수정도 어려워진다.</p>

<p>상속과 다형성은 단순히 멤버변수나 메소드의 재사용 가능의 유무만 따지는 것이 아니다. 하나의 클래스가 다른 클래스에 포함되는 하위 개념 혹은 일반적인 클래스와 이것이 더욱 구체화되는 클래스의 관계에 사용하는 것이 맞다.</p>
:ET
I"d3<h1 id="1-메소드-오버라이딩이란">1. 메소드 오버라이딩이란?</h1>

<hr />

<p>상위 클래스를 상속받은 하위 클래스는 상위 클래스의 메소드를 재정의하여 사용할 수 있다. 이 때 메소드의 반환형, 매개변수의 갯수와 자료형, 메소드의 이름은 동일해야 한다. 그렇지 않으면 컴파일러가 다른 메소드로 인식해버린다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
   <span class="kd">protected</span> <span class="kt">int</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="kd">protected</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="kd">protected</span> <span class="nc">String</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="kt">int</span> <span class="n">bonusPoint</span><span class="o">;</span>
   <span class="kt">double</span> <span class="n">bonusRatio</span><span class="o">;</span>
   
   <span class="c1">//객체 생성과 동시에 고객번호와 이름 필수로 정의</span>
   <span class="kd">public</span> <span class="nf">Customer</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerID</span> <span class="o">=</span> <span class="n">customerID</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerName</span> <span class="o">=</span> <span class="n">customerName</span><span class="o">;</span>
      <span class="n">customerGrade</span> <span class="o">=</span> <span class="s">"SILVER"</span><span class="o">;</span> <span class="c1">// 기본 등급</span>
      <span class="n">bonusRatio</span> <span class="o">=</span> <span class="mf">0.01</span><span class="o">;</span> <span class="c1">// 기본 적립율</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calcPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">bonusPoint</span> <span class="o">+=</span> <span class="n">price</span> <span class="o">*</span> <span class="n">bonusRatio</span><span class="o">;</span> <span class="c1">// 보너스 포인트 적립</span>
      <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showCustomerInfo</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerName</span><span class="o">+</span><span class="s">"'s grade is "</span><span class="o">+</span><span class="n">customerGrade</span><span class="o">+</span><span class="s">" and bonus point is "</span><span class="o">+</span><span class="n">bonusPoint</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCustomerID</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerID</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerID</span> <span class="o">=</span> <span class="n">customerID</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCustomerName</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerName</span><span class="o">(</span><span class="nc">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerName</span> <span class="o">=</span> <span class="n">customerName</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCustomerGrade</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomerGrade</span><span class="o">(</span><span class="nc">String</span> <span class="n">customerGrade</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">customerGrade</span> <span class="o">=</span> <span class="n">customerGrade</span><span class="o">;</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VIPCustomer</span> <span class="kd">extends</span> <span class="nc">Customer</span><span class="o">{</span>
   <span class="kd">private</span> <span class="kt">int</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="kt">double</span> <span class="n">saleRatio</span><span class="o">;</span>
   
   <span class="c1">// 상위클래스의 생성자가 고객번호와 이름을 매개변수로 받으므로 이를 super()에 전달하고 담당 직원번호 정의</span>
   <span class="kd">public</span> <span class="nf">VIPCustomer</span><span class="o">(</span><span class="kt">int</span> <span class="n">customerID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">agentID</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">(</span><span class="n">customerID</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
      <span class="n">customerGrade</span> <span class="o">=</span> <span class="s">"VIP"</span><span class="o">;</span>
      <span class="n">bonusRatio</span> <span class="o">=</span> <span class="mf">0.05</span><span class="o">;</span>
      <span class="n">saleRatio</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">agentID</span> <span class="o">=</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>
   
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">agentID</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>
   
   
   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showVIPInfo</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">showCustomerInfo</span><span class="o">()+</span><span class="s">". The agentID is "</span><span class="o">+</span><span class="n">agentID</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="nd">@Override</span> <span class="c1">//컴파일러에게 메소드 오버라이딩임을 알려줌</span>
   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calcPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">bonusPoint</span> <span class="o">+=</span> <span class="n">price</span><span class="o">*</span><span class="n">bonusRatio</span><span class="o">;</span>
      <span class="k">return</span> <span class="n">price</span><span class="o">-(</span><span class="kt">int</span><span class="o">)(</span><span class="n">price</span><span class="o">*</span><span class="n">saleRatio</span><span class="o">);</span> <span class="c1">//할인율 적용</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>VIPCustomer 클래스에서는 calcPrice() 메소드를 재정의 하였다. 메소드의 반환형과 이름, 매개변수의 갯수와 자료형이 일치한다. 그러나 반환해주는 가격의 계산식 할인율을 적용하여 다시 정의하였다.</p>

<p>메소드 위에 @Override는 컴파일러에게 이 메소드가 상위 클래스의 메소드를 오버라이딩했음을 알려준다. 적어주지 않아도 상관은 없는데 메소드 오버라이딩을 의도함을 알려줌으로써 오버라이딩 규칙에 어긋나는 문법을 발견하면 에러를 발생시켜 프로그래머에게 알려주어 코드 오류를 방지해주므로 해주는 것이 좋다.</p>

<p> </p>

<p> </p>

<h1 id="2-가상-메소드">2. 가상 메소드</h1>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">inheritance</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerTest</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      
      <span class="nc">Customer</span> <span class="n">customerKim</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">VIPCustomer</span><span class="o">(</span><span class="mi">10020</span><span class="o">,</span> <span class="s">"Kim"</span><span class="o">,</span> <span class="mi">12345</span><span class="o">);</span> <span class="c1">//Customer형의 참조변수에 VIPCustomer의 객체주소 저장</span>
      <span class="n">customerKim</span><span class="o">.</span><span class="na">bonusPoint</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">;</span>
      
      <span class="c1">//Customer의 calcPrice()가 실행될까 VIPCustomer의 calcPrice()가 실행될까?</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customerKim</span><span class="o">.</span><span class="na">calcPrice</span><span class="o">(</span><span class="mi">10000</span><span class="o">));</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에서는 VIPCustomer() 객체를 가르키는 customerKim의 참조변수가 Customer 자료형으로 형변환 되었다.</p>

<p>이 때 Customer클래스의 메소드가 실행될까 아니면 VIPCustomer클래스의 메소드가 실행될까?</p>

<p>결과를 알기 위해서는 가상 메소드라는 개념에 대해 알아야한다.</p>

<p>클래스로 객체를 생성할 때 마다 멤버변수를 힙 메모리에 저장한다. 그러나 메소드는 실행해야 할 명령어이기 때문에 메모리의 코드영역에 저장된다. 인스턴스를 여러개 생성해도 하나의 같은 메소드를 참조한다. 즉, 같은 클래스의 객체를 참조하는 참조변수는 여러개라도 모두 같은 메소드의 주소를 저장하고있다. 이를 가상메소드 방식이라고 한다.</p>

<p>그런데 하위 클래스에서 상위 클래스의 메소드를 오버라이드하면 가상 메소드 영역에 새로운 공간이 할당되고 거기에 재정의 된 메소드가 새로 만들어진다. 따라서 하위 클래스의 객체를 참조하는 참조변수는 메소드가 호출되었을 때 이 메소드를 참조한다.</p>

<p>따라서 customerKim 참조변수는 VIPCustomer 클래스의 재정의 된 메소드를 참조한다. 실행시켜서 정말 그런지 확인해봐야겠다.</p>

<p>실행결과</p>

<p>9000</p>

<p> 정말로 할인 된 가격정보를 출력한다.</p>
:ET